/*
 * USLRView.java
 */

package uslr;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class USLRView extends FrameView {

    public USLRView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = USLRApp.getApplication().getMainFrame();
            aboutBox = new USLRAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        USLRApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        lyricsPanel = new javax.swing.JPanel();
        editLyricsField = new javax.swing.JTextField();
        currentLineField = new javax.swing.JFormattedTextField();
        lyricsFileField = new javax.swing.JTextField();
        loadLyricsFileButton = new javax.swing.JButton();
        prevSyllableButton = new javax.swing.JButton();
        nextSyllableButton = new javax.swing.JButton();
        getCharButton = new javax.swing.JButton();
        skipCharButton = new javax.swing.JButton();
        logPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        lyricsPanel.setName("lyricsPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(uslr.USLRApp.class).getContext().getResourceMap(USLRView.class);
        editLyricsField.setText(resourceMap.getString("editLyricsField.text")); // NOI18N
        editLyricsField.setName("editLyricsField"); // NOI18N

        currentLineField.setText(resourceMap.getString("currentLineField.text")); // NOI18N
        currentLineField.setName("currentLineField"); // NOI18N

        lyricsFileField.setText(resourceMap.getString("lyricsFileField.text")); // NOI18N
        lyricsFileField.setName("lyricsFileField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(uslr.USLRApp.class).getContext().getActionMap(USLRView.class, this);
        loadLyricsFileButton.setAction(actionMap.get("loadLyricsFileAction")); // NOI18N
        loadLyricsFileButton.setText(resourceMap.getString("loadLyricsFileButton.text")); // NOI18N
        loadLyricsFileButton.setName("loadLyricsFileButton"); // NOI18N

        prevSyllableButton.setText(resourceMap.getString("prevSyllableButton.text")); // NOI18N
        prevSyllableButton.setName("prevSyllableButton"); // NOI18N

        nextSyllableButton.setText(resourceMap.getString("nextSyllableButton.text")); // NOI18N
        nextSyllableButton.setName("nextSyllableButton"); // NOI18N

        getCharButton.setText(resourceMap.getString("getCharButton.text")); // NOI18N
        getCharButton.setName("getCharButton"); // NOI18N

        skipCharButton.setText(resourceMap.getString("skipCharButton.text")); // NOI18N
        skipCharButton.setName("skipCharButton"); // NOI18N

        javax.swing.GroupLayout lyricsPanelLayout = new javax.swing.GroupLayout(lyricsPanel);
        lyricsPanel.setLayout(lyricsPanelLayout);
        lyricsPanelLayout.setHorizontalGroup(
            lyricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lyricsPanelLayout.createSequentialGroup()
                .addGroup(lyricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lyricsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(loadLyricsFileButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lyricsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(currentLineField, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
                    .addGroup(lyricsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lyricsFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
                    .addGroup(lyricsPanelLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(prevSyllableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editLyricsField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextSyllableButton))
                    .addGroup(lyricsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(getCharButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipCharButton)))
                .addContainerGap())
        );
        lyricsPanelLayout.setVerticalGroup(
            lyricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lyricsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadLyricsFileButton)
                .addGap(17, 17, 17)
                .addComponent(currentLineField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(lyricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editLyricsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevSyllableButton)
                    .addComponent(nextSyllableButton))
                .addGap(38, 38, 38)
                .addGroup(lyricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getCharButton)
                    .addComponent(skipCharButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lyricsFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("lyricsPanel.TabConstraints.tabTitle"), lyricsPanel); // NOI18N

        logPanel.setName("logPanel"); // NOI18N
        logPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logTextArea.setName("logTextArea"); // NOI18N
        jScrollPane1.setViewportView(logTextArea);

        logPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(resourceMap.getString("logPanel.TabConstraints.tabTitle"), logPanel); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        openMenuItem.setAction(actionMap.get("openSongAction")); // NOI18N
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        fileMenu.add(openMenuItem);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void openSongAction() {
        JFrame mainFrame = USLRApp.getApplication().getMainFrame();
        int returnVal = fileChooser.showOpenDialog(mainFrame);
        loadedFile = fileChooser.getSelectedFile();
        try {
            log("Opening song: " + loadedFile.getCanonicalPath());
            loadSong();
        }
        catch(Exception x) {
            log(x.getLocalizedMessage());
        }
     }

    public void log(String text) {
        logTextArea.append(text + "\n");
    }

    public void loadSong() {
        try {
            String cs = Charset.defaultCharset().name();
            FileInputStream strm = new FileInputStream(loadedFile);
            byte[] bomTest = new byte[utf8Bom.length];
            strm.read(bomTest);
            boolean isUtf8 = true;
            for(int i = 0; i < utf8Bom.length; i++) {
                if(utf8Bom[i] != bomTest[i]) {
                    isUtf8 = false;
                }
            }
            if(!isUtf8) {
                log("Reading using the default encoding: " + cs);
                // Re-open the file to start from position 0
                strm.close();
                strm = new FileInputStream(loadedFile);
            }
            else {
                log("Reading as UTF-8");
                cs = "UTF-8";
            }

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(strm, cs));

            loadedSong = new Song();
            loadedSong.load(reader);

            strm.close();
        }
        catch(Exception x) {
            log(x.getLocalizedMessage());
        }
    }

    @Action
    public void loadLyricsFileAction() {
        JFrame mainFrame = USLRApp.getApplication().getMainFrame();
        int returnVal = fileChooser.showOpenDialog(mainFrame);
        loadedFile = fileChooser.getSelectedFile();
        try {
            log("Loading lyrics file: " + loadedFile.getCanonicalPath());
            loadLyricsFile(loadedFile);
        }
        catch(Exception x) {
            log(x.getLocalizedMessage());
        }
    }

    public void loadLyricsFile(File lyricsFile) {
        try {
            FileInputStream strm = new FileInputStream(lyricsFile);
            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(strm, "UTF-8"));
            String lyrics = "";
            String line = reader.readLine();
            while(line != null) {
                lyrics += line + " ";
                line = reader.readLine();
            }
            strm.close();

            lyricsFileField.setText(lyrics);
        }
        catch(Exception x) {
            log(x.getLocalizedMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField currentLineField;
    private javax.swing.JTextField editLyricsField;
    private javax.swing.JButton getCharButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loadLyricsFileButton;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField lyricsFileField;
    private javax.swing.JPanel lyricsPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextSyllableButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton prevSyllableButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton skipCharButton;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private final byte[] utf8Bom = {(byte)0xef, (byte)0xbb, (byte)0xbf};
    private final JFileChooser fileChooser = new JFileChooser("C:/Program Files/Ultrastar Deluxe/songs/Korean");
    private File loadedFile = null;
    private Song loadedSong = null;
}
